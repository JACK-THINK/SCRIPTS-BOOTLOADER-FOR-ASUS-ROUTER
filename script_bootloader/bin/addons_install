#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL="$(nvram get model)"
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="ADDONS"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALL"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_ROOT: The root directory for SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ROOT为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统根目录
SBL_SYS_ROOT="${USB_MOUNT_POINT}/script_bootloader"
#
# SBL_SYS_ETC: The directory which contains all the configuration files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ETC为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统配置文件目录
SBL_SYS_ETC="${SBL_SYS_ROOT}/etc"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${SBL_SYS_ROOT}/usr"
#
# SBL_SYS_VAR: The directory which contains all the variable files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_VAR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统可变文件目录
SBL_SYS_VAR="${SBL_SYS_ROOT}/var"
#
########## END ##########
#
#
########## LOAD FUNCTIONS ##########
#
doubleCheckAndConfirm()
{
    while [ 1 ]
    do
        local VALUE_1
        local VALUE_2
        #
        /opt/bin/echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE: "
        read VALUE_1
        /opt/bin/echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE AGAIN TO CONFIRM: "
        read VALUE_2
        #
        if [ "${VALUE_1}" == "${VALUE_2}" ]
        then
            eval ${1}="${VALUE_1}"
            break
        else
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: THE TWO VALUES ARE INCONSISTENT"
        fi
    done
}
#
########## END ##########
#
#
########## SAVE AND APPLY CREDENTIALS ##########
#
# Temporary Solution: The code in this section is to solve the problem that gotee can't output the lines without \n, which makes no instruction given during the installation of the addons
# 临时解决方案：本节代码的存在是因为gotee不能输出没有\n的行，导致不显示插件安装提示信息
#
if [ ! -e "${SBL_SYS_ETC}/sbl_credentials" ] && \
[ -z "$(nvram get sbl_password)" ]
then
    while [ 1 ]
    do
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUSERNAME\033[0m: login username of the router"
        doubleCheckAndConfirm ADMINUSER
        #
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mPASSWORD\033[0m: login password of the router"
        doubleCheckAndConfirm ADMINPASSWORD
        #
        if [ "${ADMINUSER}" != "$(nvram get http_username)" ]
        then
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: INPUTS ARE NOT IDENTICAL TO THE INFORMATION SAVED IN THE ROUTER, PLEASE INPUT AGAIN"
        else
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUSERNAME\033[0m: ${ADMINUSER}"
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mPASSWORD\033[0m: ${ADMINPASSWORD}"
            #
            /opt/bin/echo -e "ADMINUSER=\"${ADMINUSER}\"" > "${SBL_SYS_ETC}/sbl_credentials"
            /opt/bin/echo -e "ADMINPASSWORD=\"${ADMINPASSWORD}\"" >> "${SBL_SYS_ETC}/sbl_credentials"
            /opt/bin/cp -f "${SBL_SYS_ETC}/sbl_credentials" "/opt/etc"
            #
            nvram set sbl_username="${ADMINUSER}"
            nvram set sbl_password="${ADMINPASSWORD}"
            nvram commit
            #
            break
        fi
    done
    #
    # Disable MONIT MANAGEMENT SYSTEM and all its services
    # 禁用MONIT MANAGEMENT SYSTEM及其全部服务
    if [ "$(which monit)" == "/opt/bin/monit" ]
    then
        for MONIT_SERVICE in $(/opt/bin/monit -vB summary | /opt/bin/grep -E '[[:space:]]+Name[[:space:]]+=[[:space:]]+' | /opt/bin/sed -E -n -e 's#([^=]+=[[:space:]]+)([^[:space:]]+$)#\2#p')
        do
            /opt/bin/monit stop "${MONIT_SERVICE}"
            #
            while [ "$(/opt/bin/monit -B status "${MONIT_SERVICE}" | /opt/bin/sed -E -n -e 's/^[[:space:]]*status[[:space:]]+(.*)/\1/p')" != "Not monitored" ]
            do
                /opt/bin/sleep 5
            done
        done
        #
        /opt/bin/monit quit
        #
        while [ -n "$(pidof monit)" ]
        do
            /opt/bin/sleep 5
        done
        #
        MONIT_ID_FILE="$(/opt/bin/sed -E -n -e 's/^set[[:space:]]+idfile[[:space:]]+([^[:space:]]+)/\1/p' "/opt/etc/monitrc")"
        if [ "${MONIT_ID_FILE}" == "/var/.monit.id" ]
        then
            /opt/bin/rm -f "${MONIT_ID_FILE}"
        fi
        #
        MONIT_STATE_FILE="$(/opt/bin/sed -E -n -e 's/^set[[:space:]]+statefile[[:space:]]+([^[:space:]]+)/\1/p' "/opt/etc/monitrc")"
        if [ "${MONIT_STATE_FILE}" == "/var/.monit.state" ]
        then
            /opt/bin/rm -f "${MONIT_STATE_FILE}"
        fi
    fi
    #
    # Configure MONIT MANAGEMENT SYSTEM
    # 配置MONIT MANAGEMENT SYSTEM
    /opt/bin/sed -E -i 's/allow[[:space:]]+[[:alnum:]_]+:[[:alnum:]_]+/allow '"\'${ADMINUSER}\'\:\'${ADMINPASSWORD}\'"'/' "/opt/etc/monitrc"
    #
    # Start MONIT MANAGEMENT SYSTEM及其全部服务
    # 启动MONIT MANAGEMENT SYSTEM及其全部服务
    /opt/etc/init.d/S*monit start
    #
    /opt/bin/sleep 10
fi
#
########## END ##########
#
#
########## GENERATE ADDON LIST ##########
#
/opt/bin/mkdir -p "${SBL_SYS_VAR}/addons"
#
# Check if ${SBL_SYS_ETC}/exclusion_list_of_addons_install exists
# 检查文件${SBL_SYS_ETC}/exclusion_list_of_addons_install是否存在
if [ -e "${SBL_SYS_ETC}/exclusion_list_of_addons_install" ]
then
    /opt/bin/find "${SBL_SYS_USR}" -name '*_install' | /opt/bin/grep -vEf "${SBL_SYS_ETC}/exclusion_list_of_addons_install" > "${SBL_SYS_VAR}/addons/addons_install_list"
    #
else
    # Exclude system components and special flags
    # 如果文件${SBL_SYS_ETC}/exclusion_list_of_addons_install不存在，则执行
    /opt/bin/echo -e "\033[1;43;31mNOTICE\033[0m: UNABLE TO LOCATE ${SBL_SYS_ETC}/exclusion_list_of_addons_install, EXCLUDE SYSTEM COMPONENTS AND ADDONS WITH SPECIAL FLAGS INSTEAD" | /opt/bin/tee -a "${SBL_SYS_VAR}/addons/addons_install_log"
    #
    /opt/bin/find "${SBL_SYS_USR}" -name '*_install' | /opt/bin/grep -vE '(dependency|dnsmasq.d|entware|fwd|monit|overture|software|swap|timezone|dev_|old_|deprecated)' > "${SBL_SYS_VAR}/addons/addons_install_list"
fi
#
########## END ##########
#
#
########## ADDONS INSTALLATION ##########
#
# ADDON_COUNT: The count of addons to install
# 设置自定义变量ADDON_COUNT为待安装插件计数
ADDON_COUNT=$(/opt/bin/cat "${SBL_SYS_VAR}/addons/addons_install_list" | /opt/bin/wc -l)
#
while [ 1 ]
do
    # Print the menu for addons
    # 打印插件菜单
    ADDON_ORDER=1
    /opt/bin/echo -e "\nCHOOSE THE ADDON YOU WANT TO INSTALL:\n"
    /opt/bin/printf "\033[1;31m%4d. %s\033[0m\n" "0" "exit"
    #
    while [ ${ADDON_ORDER} -le ${ADDON_COUNT} ]
    do
        ADDON_ITEM="$(/opt/bin/sed -E -n -e 's/.*\/([[:alnum:]_-]+)_install/\1/' -e ''"${ADDON_ORDER}"'p' "${SBL_SYS_VAR}/addons/addons_install_list")"
        #
        case "$(/opt/bin/grep -E ':[[:space:]]+'"${ADDON_ITEM}"'$' "${SBL_SYS_VAR}/addons/addons_install_log" 2> /dev/null | /opt/bin/sed -E -e 's/^[^[:alpha:]]+m([[:upper:]]+).*/\1/')" in
            "SUCCESS")
                ADDON_STATUS="[INSTALLED    ]"
                ;;
            "FAILURE")
                ADDON_STATUS="[ERROR        ]"
                ;;
            *)
                ADDON_STATUS="[NON-INSTALLED]"
                ;;
        esac
        #
        /opt/bin/printf "%4d. %s %s\n" "${ADDON_ORDER}" "${ADDON_STATUS}" "${ADDON_ITEM}"
        ADDON_ORDER=$((${ADDON_ORDER}+1))
    done
    #
    /opt/bin/echo -ne "\nINPUT ONE ORDER NUMBER EACH TIME: "
    #
    # Read the input of user
    # 读取用户输入值
    read INPUT_VALUE
    #
    # Check if value ${INPUT_VALUE} is valid
    # 检查值${INPUT_VALUE}是否有效
    if [ ${INPUT_VALUE} -lt 0 ] || [ ${INPUT_VALUE} -gt ${ADDON_COUNT} ]
    then
        /opt/bin/echo -e "\033[1;43;31mNOTICE\033[0m: ${INPUT_VALUE} IS INVALID\n"
        #
    else
        if [ ${INPUT_VALUE} -eq 0 ]
        then
            break
        fi
        #
        ADDON_TO_INSTALL="$(/opt/bin/sed -E -n -e 's/.*\/([[:alnum:]_-]+)_install/\1/' -e ''"${INPUT_VALUE}"'p' "${SBL_SYS_VAR}/addons/addons_install_list")"
        #
        # Check if ${ADDON_TO_INSTALL} has been installed successfully
        # 检查文件${ADDON_TO_INSTALL}是否已成功安装
        ADDON_STATUS_SUCCESS="$(/opt/bin/grep -E 'SUCCESS.*:[[:space:]]+'"${ADDON_TO_INSTALL}"'' "${SBL_SYS_VAR}/addons/addons_install_log" 2> /dev/null)"
        #
        if [ -z "${ADDON_STATUS_SUCCESS}" ]
        then
            # Install the addon chosen by user
            # 安装用户选择的插件
            "$(/opt/bin/sed -E -n -e ''"${INPUT_VALUE}"'p' "${SBL_SYS_VAR}/addons/addons_install_list")"
            #
            # Check if return value is 0
            # 检查返回值是否为0
            if [ ${?} -eq 0 ]
            then
                /opt/bin/echo -e "\033[1;42;37mSUCCESS\033[0m: ${ADDON_TO_INSTALL}" >> "${SBL_SYS_VAR}/addons/addons_install_log"
                #
            else
                /opt/bin/echo -e "\033[1;41;37mFAILURE\033[0m: ${ADDON_TO_INSTALL}" >> "${SBL_SYS_VAR}/addons/addons_install_log"
            fi
            #
        else
            /opt/bin/echo -e "\033[1;43;31mNOTICE\033[0m: ${ADDON_TO_INSTALL} HAS BEEN INSTALLED"
        fi
    fi
done
#
########## END ##########