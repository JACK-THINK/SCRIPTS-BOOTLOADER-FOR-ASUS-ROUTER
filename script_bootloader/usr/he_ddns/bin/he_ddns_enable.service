#!/bin/sh
#
########## SET THE CUSTOM VARIABLES ##########
#
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáè
# ÂΩìËØ•Á®ãÂ∫èËøêË°åÁªìÊùüÔºåÊ≠§Â§ÑËÆæÁΩÆÁöÑÂèòÈáèËá™Âä®ÂèñÊ∂à
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèUSB_MOUNT_POINT‰∏∫UÁõòÊåÇËΩΩÁÇπ
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèSBL_SYS_USR‰∏∫SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTERÁ≥ªÁªüÂ§ñÈÉ®ËΩØ‰ª∂ËµÑÊ∫êÁõÆÂΩïÔºåÂç≥Êèí‰ª∂ÁõÆÂΩï
SBL_SYS_USR="${USB_MOUNT_POINT}/script_bootloader/usr"
#
# PRIVATE_ROOT: The root directory for this program
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèPRIVATE_ROOT‰∏∫Ê≠§Á®ãÂ∫èÊ†πÁõÆÂΩï
PRIVATE_ROOT="${SBL_SYS_USR}/he_ddns"
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèPRIVATE_ETC‰∏∫Ê≠§Á®ãÂ∫èÈÖçÁΩÆÊñá‰ª∂ÁõÆÂΩï
PRIVATE_ETC="${PRIVATE_ROOT}/etc"
#
# PRIVATE_TMP: The directory which contains all the temporary files related to this program
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèPRIVATE_TMP‰∏∫Ê≠§Á®ãÂ∫è‰∏¥Êó∂Êñá‰ª∂ÁõÆÂΩï
PRIVATE_TMP="${PRIVATE_ROOT}/tmp"
#
# PRIVATE_USR: The directory which contains all the external software resources related to this program
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèPRIVATE_USR‰∏∫Ê≠§Á®ãÂ∫èÂ§ñÈÉ®ËΩØ‰ª∂ËµÑÊ∫êÁõÆÂΩï
PRIVATE_USR="${PRIVATE_ROOT}/usr"
#
# PRIVATE_VAR: The directory which contains all the variable files related to this program
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèPRIVATE_VAR‰∏∫Ê≠§Á®ãÂ∫èÂèØÂèòÊñá‰ª∂ÁõÆÂΩï
PRIVATE_VAR="${PRIVATE_ROOT}/var"
#
# LOGFILE: The log file
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèLOGFILE‰∏∫Êó•ÂøóÊñá‰ª∂
LOGFILE="${PRIVATE_VAR}/log.txt"
#
# WAN0_GW_IFNAME: The interface name of WAN0 gateway
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèWAN0_GW_IFNAME‰∏∫WAN0ÁΩëÂÖ≥ËÆæÂ§áÂêç
WAN0_GW_IFNAME="$(nvram get wan0_gw_ifname)"
#
# FQDN: The FQDN of the target server
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèFQDN‰∏∫ÁõÆÊ†áÊúçÂä°Âô®FQDN
FQDN="$(/opt/bin/sed -E -n -e 's#^FQDN=\"(.+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
# DDNS_PASSWORD: The password to update the target DNS record
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèDDNS_PASSWORD‰∏∫Áî®‰∫éÊõ¥Êñ∞ÁõÆÊ†áDNSËÆ∞ÂΩïÁöÑÂØÜÁ†Å
DDNS_PASSWORD="$(/opt/bin/sed -E -n -e 's#^DDNS_PASSWORD=\"([[:alnum:]]+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
# MAIL_SMTP_SERVER: The SMTP server of the sender
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèMAIL_SMTP_SERVER‰∏∫ÈÄöÁü•ÈÇÆ‰ª∂Âèë‰ª∂‰∫∫ÁöÑSMTPÊúçÂä°Âô®Âú∞ÂùÄ
MAIL_SMTP_SERVER="$(/opt/bin/sed -E -n -e 's#^MAIL_SMTP_SERVER=\"(.+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
# MAIL_PASSWORD: The password of sender
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèMAIL_PASSWORD‰∏∫ÈÄöÁü•ÈÇÆ‰ª∂Âèë‰ª∂‰∫∫ÂØÜÁ†Å
MAIL_PASSWORD="$(/opt/bin/sed -E -n -e 's#^MAIL_PASSWORD=\"([[:alnum:]]+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
# MAIL_FROM: The sender of the notification email
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèMAIL_FROM‰∏∫ÈÄöÁü•ÈÇÆ‰ª∂Âèë‰ª∂‰∫∫
MAIL_FROM="$(/opt/bin/sed -E -n -e 's#^MAIL_FROM=\"(.+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
# MAIL_TO: The recipient of the notification email
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèMAIL_TO‰∏∫ÈÄöÁü•ÈÇÆ‰ª∂Êî∂‰ª∂‰∫∫
MAIL_TO="$(/opt/bin/sed -E -n -e 's#^MAIL_TO=\"(.+)\"#\1#p' "${PRIVATE_ETC}/he_ddns.config")"
#
########## END ##########
#
#
########## LOAD FUNCTIONS ##########
#
getIPAddress()
{
    # SOURCE_OF_EXTERNAL_IP_ADDRESS: The source of external IP address
    # ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèSOURCE_OF_EXTERNAL_IP_ADDRESS‰∏∫Â§ñÈÉ®IPÂú∞ÂùÄÊù•Ê∫ê
    for SOURCE_OF_EXTERNAL_IP_ADDRESS in "icanhazip.com" "whatismyip.akamai.com" "ident.me" "ifconfig.me"
    do
        # EXTERNAL_IPV4_ADDRESS: The external IPv4 address
        # ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèEXTERNAL_IPV4_ADDRESS‰∏∫Â§ñÈÉ®IPv4Âú∞ÂùÄ
        EXTERNAL_IPV4_ADDRESS="$(/opt/bin/curl -s -4 "${SOURCE_OF_EXTERNAL_IP_ADDRESS}")"
        #
        # EXTERNAL_IPV6_ADDRESS: The external IPv6 address
        # ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèEXTERNAL_IPV6_ADDRESS‰∏∫Â§ñÈÉ®IPv6Âú∞ÂùÄ
        #EXTERNAL_IPV6_ADDRESS="$(/opt/bin/curl -s -6 "${SOURCE_OF_EXTERNAL_IP_ADDRESS}")"
        #
        if [ -n "${EXTERNAL_IPV4_ADDRESS}" ]
        then
            break
        fi
        #
    done
    #
    # WAN0_GW_IPV4_ADDRESS: The IPv4 address of the router's WAN0 gateway
    # ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèWAN0_GW_IPV4_ADDRESS‰∏∫Ë∑ØÁî±Âô®WAN0ÁΩëÂÖ≥IPv4Âú∞ÂùÄ
    WAN0_GW_IPV4_ADDRESS="$(ip address show dev "${WAN0_GW_IFNAME}" | /opt/bin/sed -E -n -e 's/^[[:space:]]*inet[[:space:]]*([[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*).*/\1/p')"
    #
    # WAN0_GW_IPV6_ADDRESS: The IPv6 address of the router's WAN0 gateway
    # ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèWAN0_GW_IPV6_ADDRESS‰∏∫Ë∑ØÁî±Âô®WAN0ÁΩëÂÖ≥IPv6Âú∞ÂùÄ
    #WAN0_GW_IPV6_ADDRESS="$()"
}
#
########## END ##########
#
#
########## TEST CONNECTION AND UPDATE DNS RECORD ##########
#
# FAIL_DATE: The date of the first failure
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèFAIL_DATE‰∏∫È¶ñÊ¨°Â§±Ë¥•ÁöÑÊó∂Èó¥
FAIL_DATE=""
#
# FAIL_COUNT: The count of failure
# ËÆæÁΩÆËá™ÂÆö‰πâÂèòÈáèFAIL_COUNT‰∏∫Â§±Ë¥•ËÆ°Êï∞
FAIL_COUNT=0
#
# Test WAN connection
# ÊµãËØïWANËøûÊé•
while [ ${FAIL_COUNT} -lt 3 ]
do
    RESULT_1_OF_CONNECTION_TEST="$(ping -q -c 1 -s 32 -W 5 "www.bing.com" 2> /dev/null | grep "100%")"
    RESULT_2_OF_CONNECTION_TEST="$(ping -q -c 1 -s 32 -W 5 "www.alibaba.com" 2> /dev/null | grep "100%")"
    RESULT_3_OF_CONNECTION_TEST="$(ping -q -c 1 -s 32 -W 5 "www.baidu.com" 2> /dev/null | grep "100%")"
    #
    if [ -z "${RESULT_1_OF_CONNECTION_TEST}"] || [ -z "${RESULT_2_OF_CONNECTION_TEST}"] || [ -z "${RESULT_3_OF_CONNECTION_TEST}"]
    then
        getIPAddress
        #
        if [ -n "${EXTERNAL_IPV4_ADDRESS}" ] && [ -n "${WAN0_GW_IPV4_ADDRESS}" ]
        then
            FAIL_DATE=""
            FAIL_COUNT=0
            #
            break
            #
        else
            if [ -z "${FAIL_DATE}" ]
            then
                FAIL_DATE="$(/opt/bin/date "+%F %T")"
            fi
            #
            FAIL_COUNT=$((${FAIL_COUNT}+1))
            #
            if [ ${FAIL_COUNT} -ge 3 ]
            then
                /opt/bin/echo -e "FAILURE: [${FAIL_DATE}] CAN NOT GET IP ADDRESS" | /opt/bin/tee -a "${LOGFILE}"
                #
                exit 2
            fi
            #
            /opt/bin/sleep 5
        fi
        #
    else
        if [ -z "${FAIL_DATE}" ]
        then
            FAIL_DATE="$(/opt/bin/date "+%F %T")"
        fi
        #
        FAIL_COUNT=$((${FAIL_COUNT}+1))
        #
        if [ ${FAIL_COUNT} -ge 3 ]
        then
            /opt/bin/echo -e "FAILURE: [${FAIL_DATE}] NO CONNECTION" | /opt/bin/tee -a "${LOGFILE}"
            #
            exit 1
        fi
        #
        /opt/bin/sleep 5
    fi
done
#
# Check if the IP address of the router's WAN0 gateway is equal to the external IP address. If the answer is yes, update DNS record and exit. And if the answer is no, repeat the test up to 3 times. If all the answers are no, send an email as notification and exit.
# Ê£ÄÊü•Ë∑ØÁî±Âô®WAN0ÁΩëÂÖ≥IPÂú∞ÂùÄÊòØÂê¶‰∏∫Â§ñÈÉ®IPÂú∞ÂùÄ„ÄÇÂ¶ÇÊûúÊòØÔºåÂàôÊõ¥Êñ∞DNSËÆ∞ÂΩïÔºåÈÄÄÂá∫Á®ãÂ∫èÔºõÂ¶ÇÊûú‰∏çÊòØÔºåÂàôÈáçÂ§çÊµãËØï‰∏âÊ¨°„ÄÇÂ¶Ç‰∏âÊ¨°ÂÖ®ÈÉΩ‰∏çÊòØÔºåÂàôÂèëÈÄÅÈÄöÁü•ÈÇÆ‰ª∂ÔºåÈÄÄÂá∫Á®ãÂ∫è
#
while [ ${FAIL_COUNT} -lt 3 ]
do
    # Check if ${WAN0_GW_IPV4_ADDRESS} is equal to ${EXTERNAL_IPV4_ADDRESS}
    # Ê£ÄÊü•${WAN0_GW_IPV4_ADDRESS}‰∏é${EXTERNAL_IPV4_ADDRESS}ÊòØÂê¶Áõ∏Á≠â
    if [ "${WAN0_GW_IPV4_ADDRESS}" == "${EXTERNAL_IPV4_ADDRESS}" ]
    then
        # Choose one of the following metheds to update DNS record
        # Â¶ÇÊûú${WAN0_GW_IPV4_ADDRESS}‰∏é${EXTERNAL_IPV4_ADDRESS}Áõ∏Á≠âÔºåÂàôÊâßË°å
        #
        # GET IPv4
        # GETÊñπÊ≥ïÊõ¥Êñ∞IPv4
        RESULT_OF_DDNS_UPDATE="$(/opt/bin/curl -s -k "https://dyn.dns.he.net/nic/update?hostname=${FQDN}&password=${DDNS_PASSWORD}&myip=${EXTERNAL_IPV4_ADDRESS}" | /opt/bin/sed -E -n -e 's/([[:alpha:]]+)[[:space:]]+.*/\1/p')"
        #
        # GET IPv6
        # GETÊñπÊ≥ïÊõ¥Êñ∞IPv6
        #RESULT_OF_DDNS_UPDATE="$(/opt/bin/curl -s -k "https://dyn.dns.he.net/nic/update?hostname=${FQDN}&password=${DDNS_PASSWORD}&myip=${EXTERNAL_IPV6_ADDRESS}" | /opt/bin/sed -E -n -e 's/([[:alpha:]]+)[[:space:]]+.*/\1/p')"
        #
        # POST IPv4
        # POSTÊñπÊ≥ïÊõ¥Êñ∞IPv4
        #RESULT_OF_DDNS_UPDATE="$(/opt/bin/curl -s -k "https://dyn.dns.he.net/nic/update" -d "hostname=${FQDN}" -d "password=${DDNS_PASSWORD}" -d "myip=${EXTERNAL_IPV4_ADDRESS}" | /opt/bin/sed -E -n -e 's/([[:alpha:]]+)[[:space:]]+.*/\1/p')"
        #
        # POST IPv6
        # POSTÊñπÊ≥ïÊõ¥Êñ∞IPv6
        #RESULT_OF_DDNS_UPDATE="$(/opt/bin/curl -s -k "https://dyn.dns.he.net/nic/update" -d "hostname=${FQDN}" -d "password=${DDNS_PASSWORD}" -d "myip=${EXTERNAL_IPV6_ADDRESS}" | /opt/bin/sed -E -n -e 's/([[:alpha:]]+)[[:space:]]+.*/\1/p')"
        #
        case "${RESULT_OF_DDNS_UPDATE}" in
            "good")
                /opt/bin/echo -e "SUCCESS: [$(/opt/bin/date "+%F %T")] ${FQDN} üëâ ${EXTERNAL_IPV4_ADDRESS}" | /opt/bin/tee -a "${LOGFILE}"
                ;;
            "nochg")
                /opt/bin/echo -e "NO-CHANGES: ${FQDN} üëâ ${EXTERNAL_IPV4_ADDRESS}"
                ;;
        esac
        #
        FAIL_DATE=""
        FAIL_COUNT=0
        #
        exit 0
        #
    else
        if [ -z "${FAIL_DATE}" ]
        then
            FAIL_DATE="$(/opt/bin/date "+%F %T")"
        fi
        #
        FAIL_COUNT=$((${FAIL_COUNT}+1))
        #
        if [ ${FAIL_COUNT} -ge 3 ]
        then
            # Send an email as notification
            # Â¶ÇÊûú${WAN0_GW_IPV4_ADDRESS}‰∏é${EXTERNAL_IPV4_ADDRESS}‰∏çÁ≠âÔºåÂàôÊâßË°å
            /opt/bin/echo -e "FAILURE: [${FAIL_DATE}] EXTERNAL_IP(${EXTERNAL_IPV4_ADDRESS}) WAN0_GW_IP(${WAN0_GW_IPV4_ADDRESS})" | /opt/bin/tee -a "${LOGFILE}"
            #
            # Prepare mail contents
            # ÂáÜÂ§áÈÇÆ‰ª∂ÂÜÖÂÆπ
            MAIL_SUBJECT="DDNS ERROR: NO PUBLIC IP ADDRESS"
            MAIL_CONTENTS="${PRIVATE_USR}/NO_PUBLIC_IP_ADDRESS"
            /opt/bin/sed -e '1i\From:'"${MAIL_FROM}"'\nTo:'"${MAIL_TO}"'\nSubject:'"${MAIL_SUBJECT}"'\n\nDATE: '"${FAIL_DATE}"'\nFQDN: '"${FQDN}"'\nWAN0_GW_IPV4_ADDRESS: '"${WAN0_GW_IPV4_ADDRESS}"'\nEXTERNAL_IPV4_ADDRESS: '"${EXTERNAL_IPV4_ADDRESS}"'' "${MAIL_CONTENTS}" > "${PRIVATE_TMP}/mail.tmp"
            #
            # Send
            # ÂèëÈÄÅ
            /opt/bin/curl -s --url "${MAIL_SMTP_SERVER}" --mail-from "${MAIL_FROM}" --mail-rcpt "${MAIL_TO}" --upload-file "${PRIVATE_TMP}/mail.tmp" --user "${MAIL_FROM}:${MAIL_PASSWORD}" > /dev/null 2>&1
            #
            exit 3
        fi
        #
        /opt/bin/sleep 5
        #
        getIPAddress
    fi
done
#
########## END ##########